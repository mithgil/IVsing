# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _datparser
else:
    import _datparser

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _datparser.delete_SwigPyIterator

    def value(self):
        return _datparser.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _datparser.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _datparser.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _datparser.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _datparser.SwigPyIterator_equal(self, x)

    def copy(self):
        return _datparser.SwigPyIterator_copy(self)

    def next(self):
        return _datparser.SwigPyIterator_next(self)

    def __next__(self):
        return _datparser.SwigPyIterator___next__(self)

    def previous(self):
        return _datparser.SwigPyIterator_previous(self)

    def advance(self, n):
        return _datparser.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _datparser.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _datparser.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _datparser.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _datparser.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _datparser.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _datparser.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _datparser:
_datparser.SwigPyIterator_swigregister(SwigPyIterator)

def isPerfectSquare(number):
    return _datparser.isPerfectSquare(number)

def printHelp():
    return _datparser.printHelp()

def process_directories(path_str):
    return _datparser.process_directories(path_str)
class expdata(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    z = property(_datparser.expdata_z_get, _datparser.expdata_z_set)
    bias = property(_datparser.expdata_bias_get, _datparser.expdata_bias_set)
    current_fwd = property(_datparser.expdata_current_fwd_get, _datparser.expdata_current_fwd_set)
    current_bwd = property(_datparser.expdata_current_bwd_get, _datparser.expdata_current_bwd_set)
    tb_fwd = property(_datparser.expdata_tb_fwd_get, _datparser.expdata_tb_fwd_set)
    tb_bwd = property(_datparser.expdata_tb_bwd_get, _datparser.expdata_tb_bwd_set)
    amp_fwd = property(_datparser.expdata_amp_fwd_get, _datparser.expdata_amp_fwd_set)
    amp_bwd = property(_datparser.expdata_amp_bwd_get, _datparser.expdata_amp_bwd_set)
    phase_fwd = property(_datparser.expdata_phase_fwd_get, _datparser.expdata_phase_fwd_set)
    phase_bwd = property(_datparser.expdata_phase_bwd_get, _datparser.expdata_phase_bwd_set)

    def __init__(self):
        _datparser.expdata_swiginit(self, _datparser.new_expdata())
    __swig_destroy__ = _datparser.delete_expdata

# Register expdata in _datparser:
_datparser.expdata_swigregister(expdata)
class ScanRangeData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    scanRange = property(_datparser.ScanRangeData_scanRange_get, _datparser.ScanRangeData_scanRange_set)
    scanPixels = property(_datparser.ScanRangeData_scanPixels_get, _datparser.ScanRangeData_scanPixels_set)
    unit = property(_datparser.ScanRangeData_unit_get, _datparser.ScanRangeData_unit_set)

    def __init__(self):
        _datparser.ScanRangeData_swiginit(self, _datparser.new_ScanRangeData())
    __swig_destroy__ = _datparser.delete_ScanRangeData

# Register ScanRangeData in _datparser:
_datparser.ScanRangeData_swigregister(ScanRangeData)
class datParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _datparser.datParser_swiginit(self, _datparser.new_datParser())

    def printColumnData(self):
        return _datparser.datParser_printColumnData(self)

    def printFirstDat(self, filePath):
        return _datparser.datParser_printFirstDat(self, filePath)

    def parse_metadata(self, filePath):
        return _datparser.datParser_parse_metadata(self, filePath)

    def correctDoubleBias(self):
        return _datparser.datParser_correctDoubleBias(self)

    def parse_experiments(self, input_directory):
        return _datparser.datParser_parse_experiments(self, input_directory)

    def output(self, filename):
        return _datparser.datParser_output(self, filename)

    def writingJSON(self, input_directory, scanParams):
        return _datparser.datParser_writingJSON(self, input_directory, scanParams)

    def writingH5(self, input_directory, scanParams):
        return _datparser.datParser_writingH5(self, input_directory, scanParams)
    __swig_destroy__ = _datparser.delete_datParser

# Register datParser in _datparser:
_datparser.datParser_swigregister(datParser)

